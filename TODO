* BUG: when I enter the first letter into the omnibox, why isn't active_tabs
  populated yet?
* NEXT: in onInputStarted, sort maching_tabs and replace the current suggestion
  mechanism

* Feature: add a "back" shortcut that takes you to a tab from which the jump
  was made.
* Why is escape needed? Is it doing the right escaping?
* Unit testing: need a way to mock the chrome interfaces?

Matching algorithm
==================

Have to match both title and URL. Title gets higher score? It's important to
float the actually better suggestions to the top.

Scoring for tabs in current window (vs. other windows) is also interesting.
Scoring can be applied after the initial matches are found.

It even makes sense to add fuzzy-matching, with lower scores. This should take
care of spelling errors, shortcuts, etc. Something like
http://ginstrom.com/scribbles/2007/12/01/fuzzy-substring-matching-with-levenshtein-distance-in-python/

Here's a survey of existing techniques to do the same thing.

dmenu
-----

Dmenu has a simple heuristic: it looks for the word (each word in the input,
broken by whitespace) in the list of options. If the word matches one of the
options exactly, it gets priority. If the word is a prefix, it gets priority
too. Words that are just substrings get last priority. 

We can use the same approach, and bump scoring for prefixes. It's important (I
don't think switch-to-tab does it currently).

